#include <stdio.h>
#include <unistd.h>
#include "spi_to_hls_driver.h"

#define ANSI_CURSOR_HOME "\033[H"
#define ANSI_ERASE_LINE "\033[2K"

void initializeScreen() {
    printf(ANSI_CURSOR_HOME ANSI_ERASE_LINE "SPI to HLS Status Monitor\n");
    printf(ANSI_ERASE_LINE "-------------------------\n\n");
    printf(ANSI_ERASE_LINE "Sys Ctrl: Reset=\n");
    printf(ANSI_ERASE_LINE "SPI: Store Word=, Vals=, Load=, Byte=, StAddr=, LdAddr=, State=\n");
    printf(ANSI_ERASE_LINE "SPI Data: RX Valid=, TX Valid=, RX=, TX= | Data Buffer:\n");
    printf(ANSI_ERASE_LINE "HLS: Done Latch=, Select=, Start=, Done=, Idle=, Ready=\n");
    printf(ANSI_ERASE_LINE "Results: R1=, R2= | BRAM: Out1=, Out2=, Addr=\n");
    fflush(stdout);
}

void updateValues() {
    uint32_t systemControl = SYSTEM_CONTROL;
    uint32_t spiStatus = SPI_STATUS;
    uint32_t spiData = SPI_DATA;
    uint32_t dataBuffer = DATA_BUFFER;
    uint32_t hlsStatus = HLS_STATUS;
    int32_t result1 = RESULT1;
    int32_t result2 = RESULT2;
    uint32_t bramDataOut1 = BRAM_DATA_OUT1;
    uint32_t bramDataOut2 = BRAM_DATA_OUT2;
    uint32_t bramAddr = BRAM_ADDR;

    printf(ANSI_CURSOR_HOME "\033[3;1H" ANSI_ERASE_LINE "Sys Ctrl: Reset=%lu\n", systemControl & 0x1);
    printf(ANSI_ERASE_LINE "SPI: Store Word=%lu, Vals=%lu, Load=%lu, Byte=%lu, StAddr=%lu, LdAddr=%lu, State=%lu\n",
           (spiStatus >> 18) & 1, (spiStatus >> 17) & 1, (spiStatus >> 16) & 1,
           (spiStatus >> 10) & 3, (spiStatus >> 6) & 0xF, (spiStatus >> 2) & 0xF, spiStatus & 3);
    printf(ANSI_ERASE_LINE "SPI Data: RX Valid=%lu, TX Valid=%lu, RX=0x%02X, TX=0x%02X | Data Buffer: 0x%08lX\n",
           (spiData >> 17) & 1, (spiData >> 16) & 1,
           (unsigned int)((spiData >> 8) & 0xFF), (unsigned int)(spiData & 0xFF), dataBuffer);
    printf(ANSI_ERASE_LINE "HLS: Done Latch=%lu, Select=%lu, Start=%lu, Done=%lu, Idle=%lu, Ready=%lu\n",
           (hlsStatus >> 5) & 1, (hlsStatus >> 4) & 1, (hlsStatus >> 3) & 1,
           (hlsStatus >> 2) & 1, (hlsStatus >> 1) & 1, hlsStatus & 1);
    printf(ANSI_ERASE_LINE "Results: R1=%ld, R2=%ld | BRAM: Out1=0x%08X, Out2=0x%08X, Addr=%lu",
           result1, result2, (unsigned int)bramDataOut1, (unsigned int)bramDataOut2, bramAddr);

    fflush(stdout);
}

int main() {
    initializeScreen();
    while(1) {
        updateValues();
        usleep(100000);  // 0.1초 대기 (더 빠른 업데이트를 위해 시간 줄임)
    }
    return 0;
}
