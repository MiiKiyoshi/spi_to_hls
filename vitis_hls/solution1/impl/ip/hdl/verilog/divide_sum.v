// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="divide_sum_divide_sum,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.896000,HLS_SYN_LAT=47,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4966,HLS_SYN_LUT=3848,HLS_VERSION=2023_2}" *)

module divide_sum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_val1_address0,
        in_val1_ce0,
        in_val1_q0,
        in_val2_address0,
        in_val2_ce0,
        in_val2_q0,
        out_result1,
        out_result1_ap_vld,
        out_result2,
        out_result2_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] in_val1_address0;
output   in_val1_ce0;
input  [31:0] in_val1_q0;
output  [3:0] in_val2_address0;
output   in_val2_ce0;
input  [31:0] in_val2_q0;
output  [31:0] out_result1;
output   out_result1_ap_vld;
output  [31:0] out_result2;
output   out_result2_ap_vld;

reg ap_idle;
reg in_val1_ce0;
reg in_val2_ce0;
reg out_result1_ap_vld;
reg out_result2_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln10_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_264;
reg   [0:0] icmp_ln10_reg_264_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter5_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter6_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter7_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter8_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter9_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter10_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter11_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter12_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter13_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter14_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter15_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter16_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter17_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter18_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter19_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter20_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter21_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter22_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter23_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter24_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter25_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter26_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter27_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter28_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter29_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter30_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter31_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter32_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter33_reg;
reg   [0:0] icmp_ln10_reg_264_pp0_iter34_reg;
wire   [0:0] icmp_ln12_fu_159_p2;
reg   [0:0] icmp_ln12_reg_284;
reg   [0:0] icmp_ln12_reg_284_pp0_iter2_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter3_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter4_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter5_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter6_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter7_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter8_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter9_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter10_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter11_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter12_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter13_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter14_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter15_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter16_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter17_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter18_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter19_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter20_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter21_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter22_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter23_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter24_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter25_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter26_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter27_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter28_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter29_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter30_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter31_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter32_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter33_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter34_reg;
reg   [0:0] icmp_ln12_reg_284_pp0_iter35_reg;
wire   [0:0] icmp_ln13_fu_171_p2;
reg   [0:0] icmp_ln13_reg_294;
reg   [0:0] icmp_ln13_reg_294_pp0_iter2_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter3_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter4_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter5_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter6_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter7_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter8_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter9_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter10_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter11_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter12_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter13_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter14_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter15_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter16_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter17_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter18_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter19_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter20_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter21_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter22_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter23_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter24_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter25_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter26_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter27_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter28_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter29_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter30_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter31_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter32_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter33_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter34_reg;
reg   [0:0] icmp_ln13_reg_294_pp0_iter35_reg;
wire   [63:0] zext_ln10_fu_148_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_48;
wire   [3:0] add_ln10_fu_142_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_1;
reg   [31:0] empty_fu_52;
wire   [31:0] add_ln12_fu_186_p2;
reg   [31:0] empty_7_fu_56;
wire   [31:0] add_ln13_fu_205_p2;
reg   [31:0] add2_fu_60;
reg   [31:0] ap_sig_allocacmp_add2_load;
reg   [31:0] add154_fu_64;
reg   [31:0] ap_sig_allocacmp_add154_load;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_165_p2;
wire   [31:0] grp_fu_177_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_518;
reg    ap_condition_519;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 i_fu_48 = 4'd0;
#0 empty_fu_52 = 32'd0;
#0 empty_7_fu_56 = 32'd0;
#0 add2_fu_60 = 32'd0;
#0 add154_fu_64 = 32'd0;
#0 ap_done_reg = 1'b0;
end

divide_sum_sdiv_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_val1_q0),
    .din1(in_val2_q0),
    .ce(1'b1),
    .dout(grp_fu_165_p2)
);

divide_sum_sdiv_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_val2_q0),
    .din1(in_val1_q0),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

divide_sum_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter35_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_518)) begin
            add154_fu_64 <= 32'd0;
        end else if (((icmp_ln13_reg_294_pp0_iter35_reg == 1'd0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
            add154_fu_64 <= add_ln13_fu_205_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_518)) begin
            add2_fu_60 <= 32'd0;
        end else if (((icmp_ln12_reg_284_pp0_iter35_reg == 1'd0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
            add2_fu_60 <= add_ln12_fu_186_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_518)) begin
            empty_7_fu_56 <= 32'd0;
        end else if (((icmp_ln13_reg_294_pp0_iter35_reg == 1'd0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
            empty_7_fu_56 <= add_ln13_fu_205_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_518)) begin
            empty_fu_52 <= 32'd0;
        end else if (((icmp_ln12_reg_284_pp0_iter35_reg == 1'd0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
            empty_fu_52 <= add_ln12_fu_186_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_519)) begin
        if ((icmp_ln10_fu_136_p2 == 1'd0)) begin
            i_fu_48 <= add_ln10_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln10_reg_264_pp0_iter10_reg <= icmp_ln10_reg_264_pp0_iter9_reg;
        icmp_ln10_reg_264_pp0_iter11_reg <= icmp_ln10_reg_264_pp0_iter10_reg;
        icmp_ln10_reg_264_pp0_iter12_reg <= icmp_ln10_reg_264_pp0_iter11_reg;
        icmp_ln10_reg_264_pp0_iter13_reg <= icmp_ln10_reg_264_pp0_iter12_reg;
        icmp_ln10_reg_264_pp0_iter14_reg <= icmp_ln10_reg_264_pp0_iter13_reg;
        icmp_ln10_reg_264_pp0_iter15_reg <= icmp_ln10_reg_264_pp0_iter14_reg;
        icmp_ln10_reg_264_pp0_iter16_reg <= icmp_ln10_reg_264_pp0_iter15_reg;
        icmp_ln10_reg_264_pp0_iter17_reg <= icmp_ln10_reg_264_pp0_iter16_reg;
        icmp_ln10_reg_264_pp0_iter18_reg <= icmp_ln10_reg_264_pp0_iter17_reg;
        icmp_ln10_reg_264_pp0_iter19_reg <= icmp_ln10_reg_264_pp0_iter18_reg;
        icmp_ln10_reg_264_pp0_iter20_reg <= icmp_ln10_reg_264_pp0_iter19_reg;
        icmp_ln10_reg_264_pp0_iter21_reg <= icmp_ln10_reg_264_pp0_iter20_reg;
        icmp_ln10_reg_264_pp0_iter22_reg <= icmp_ln10_reg_264_pp0_iter21_reg;
        icmp_ln10_reg_264_pp0_iter23_reg <= icmp_ln10_reg_264_pp0_iter22_reg;
        icmp_ln10_reg_264_pp0_iter24_reg <= icmp_ln10_reg_264_pp0_iter23_reg;
        icmp_ln10_reg_264_pp0_iter25_reg <= icmp_ln10_reg_264_pp0_iter24_reg;
        icmp_ln10_reg_264_pp0_iter26_reg <= icmp_ln10_reg_264_pp0_iter25_reg;
        icmp_ln10_reg_264_pp0_iter27_reg <= icmp_ln10_reg_264_pp0_iter26_reg;
        icmp_ln10_reg_264_pp0_iter28_reg <= icmp_ln10_reg_264_pp0_iter27_reg;
        icmp_ln10_reg_264_pp0_iter29_reg <= icmp_ln10_reg_264_pp0_iter28_reg;
        icmp_ln10_reg_264_pp0_iter2_reg <= icmp_ln10_reg_264_pp0_iter1_reg;
        icmp_ln10_reg_264_pp0_iter30_reg <= icmp_ln10_reg_264_pp0_iter29_reg;
        icmp_ln10_reg_264_pp0_iter31_reg <= icmp_ln10_reg_264_pp0_iter30_reg;
        icmp_ln10_reg_264_pp0_iter32_reg <= icmp_ln10_reg_264_pp0_iter31_reg;
        icmp_ln10_reg_264_pp0_iter33_reg <= icmp_ln10_reg_264_pp0_iter32_reg;
        icmp_ln10_reg_264_pp0_iter34_reg <= icmp_ln10_reg_264_pp0_iter33_reg;
        icmp_ln10_reg_264_pp0_iter3_reg <= icmp_ln10_reg_264_pp0_iter2_reg;
        icmp_ln10_reg_264_pp0_iter4_reg <= icmp_ln10_reg_264_pp0_iter3_reg;
        icmp_ln10_reg_264_pp0_iter5_reg <= icmp_ln10_reg_264_pp0_iter4_reg;
        icmp_ln10_reg_264_pp0_iter6_reg <= icmp_ln10_reg_264_pp0_iter5_reg;
        icmp_ln10_reg_264_pp0_iter7_reg <= icmp_ln10_reg_264_pp0_iter6_reg;
        icmp_ln10_reg_264_pp0_iter8_reg <= icmp_ln10_reg_264_pp0_iter7_reg;
        icmp_ln10_reg_264_pp0_iter9_reg <= icmp_ln10_reg_264_pp0_iter8_reg;
        icmp_ln12_reg_284_pp0_iter10_reg <= icmp_ln12_reg_284_pp0_iter9_reg;
        icmp_ln12_reg_284_pp0_iter11_reg <= icmp_ln12_reg_284_pp0_iter10_reg;
        icmp_ln12_reg_284_pp0_iter12_reg <= icmp_ln12_reg_284_pp0_iter11_reg;
        icmp_ln12_reg_284_pp0_iter13_reg <= icmp_ln12_reg_284_pp0_iter12_reg;
        icmp_ln12_reg_284_pp0_iter14_reg <= icmp_ln12_reg_284_pp0_iter13_reg;
        icmp_ln12_reg_284_pp0_iter15_reg <= icmp_ln12_reg_284_pp0_iter14_reg;
        icmp_ln12_reg_284_pp0_iter16_reg <= icmp_ln12_reg_284_pp0_iter15_reg;
        icmp_ln12_reg_284_pp0_iter17_reg <= icmp_ln12_reg_284_pp0_iter16_reg;
        icmp_ln12_reg_284_pp0_iter18_reg <= icmp_ln12_reg_284_pp0_iter17_reg;
        icmp_ln12_reg_284_pp0_iter19_reg <= icmp_ln12_reg_284_pp0_iter18_reg;
        icmp_ln12_reg_284_pp0_iter20_reg <= icmp_ln12_reg_284_pp0_iter19_reg;
        icmp_ln12_reg_284_pp0_iter21_reg <= icmp_ln12_reg_284_pp0_iter20_reg;
        icmp_ln12_reg_284_pp0_iter22_reg <= icmp_ln12_reg_284_pp0_iter21_reg;
        icmp_ln12_reg_284_pp0_iter23_reg <= icmp_ln12_reg_284_pp0_iter22_reg;
        icmp_ln12_reg_284_pp0_iter24_reg <= icmp_ln12_reg_284_pp0_iter23_reg;
        icmp_ln12_reg_284_pp0_iter25_reg <= icmp_ln12_reg_284_pp0_iter24_reg;
        icmp_ln12_reg_284_pp0_iter26_reg <= icmp_ln12_reg_284_pp0_iter25_reg;
        icmp_ln12_reg_284_pp0_iter27_reg <= icmp_ln12_reg_284_pp0_iter26_reg;
        icmp_ln12_reg_284_pp0_iter28_reg <= icmp_ln12_reg_284_pp0_iter27_reg;
        icmp_ln12_reg_284_pp0_iter29_reg <= icmp_ln12_reg_284_pp0_iter28_reg;
        icmp_ln12_reg_284_pp0_iter2_reg <= icmp_ln12_reg_284;
        icmp_ln12_reg_284_pp0_iter30_reg <= icmp_ln12_reg_284_pp0_iter29_reg;
        icmp_ln12_reg_284_pp0_iter31_reg <= icmp_ln12_reg_284_pp0_iter30_reg;
        icmp_ln12_reg_284_pp0_iter32_reg <= icmp_ln12_reg_284_pp0_iter31_reg;
        icmp_ln12_reg_284_pp0_iter33_reg <= icmp_ln12_reg_284_pp0_iter32_reg;
        icmp_ln12_reg_284_pp0_iter34_reg <= icmp_ln12_reg_284_pp0_iter33_reg;
        icmp_ln12_reg_284_pp0_iter35_reg <= icmp_ln12_reg_284_pp0_iter34_reg;
        icmp_ln12_reg_284_pp0_iter3_reg <= icmp_ln12_reg_284_pp0_iter2_reg;
        icmp_ln12_reg_284_pp0_iter4_reg <= icmp_ln12_reg_284_pp0_iter3_reg;
        icmp_ln12_reg_284_pp0_iter5_reg <= icmp_ln12_reg_284_pp0_iter4_reg;
        icmp_ln12_reg_284_pp0_iter6_reg <= icmp_ln12_reg_284_pp0_iter5_reg;
        icmp_ln12_reg_284_pp0_iter7_reg <= icmp_ln12_reg_284_pp0_iter6_reg;
        icmp_ln12_reg_284_pp0_iter8_reg <= icmp_ln12_reg_284_pp0_iter7_reg;
        icmp_ln12_reg_284_pp0_iter9_reg <= icmp_ln12_reg_284_pp0_iter8_reg;
        icmp_ln13_reg_294_pp0_iter10_reg <= icmp_ln13_reg_294_pp0_iter9_reg;
        icmp_ln13_reg_294_pp0_iter11_reg <= icmp_ln13_reg_294_pp0_iter10_reg;
        icmp_ln13_reg_294_pp0_iter12_reg <= icmp_ln13_reg_294_pp0_iter11_reg;
        icmp_ln13_reg_294_pp0_iter13_reg <= icmp_ln13_reg_294_pp0_iter12_reg;
        icmp_ln13_reg_294_pp0_iter14_reg <= icmp_ln13_reg_294_pp0_iter13_reg;
        icmp_ln13_reg_294_pp0_iter15_reg <= icmp_ln13_reg_294_pp0_iter14_reg;
        icmp_ln13_reg_294_pp0_iter16_reg <= icmp_ln13_reg_294_pp0_iter15_reg;
        icmp_ln13_reg_294_pp0_iter17_reg <= icmp_ln13_reg_294_pp0_iter16_reg;
        icmp_ln13_reg_294_pp0_iter18_reg <= icmp_ln13_reg_294_pp0_iter17_reg;
        icmp_ln13_reg_294_pp0_iter19_reg <= icmp_ln13_reg_294_pp0_iter18_reg;
        icmp_ln13_reg_294_pp0_iter20_reg <= icmp_ln13_reg_294_pp0_iter19_reg;
        icmp_ln13_reg_294_pp0_iter21_reg <= icmp_ln13_reg_294_pp0_iter20_reg;
        icmp_ln13_reg_294_pp0_iter22_reg <= icmp_ln13_reg_294_pp0_iter21_reg;
        icmp_ln13_reg_294_pp0_iter23_reg <= icmp_ln13_reg_294_pp0_iter22_reg;
        icmp_ln13_reg_294_pp0_iter24_reg <= icmp_ln13_reg_294_pp0_iter23_reg;
        icmp_ln13_reg_294_pp0_iter25_reg <= icmp_ln13_reg_294_pp0_iter24_reg;
        icmp_ln13_reg_294_pp0_iter26_reg <= icmp_ln13_reg_294_pp0_iter25_reg;
        icmp_ln13_reg_294_pp0_iter27_reg <= icmp_ln13_reg_294_pp0_iter26_reg;
        icmp_ln13_reg_294_pp0_iter28_reg <= icmp_ln13_reg_294_pp0_iter27_reg;
        icmp_ln13_reg_294_pp0_iter29_reg <= icmp_ln13_reg_294_pp0_iter28_reg;
        icmp_ln13_reg_294_pp0_iter2_reg <= icmp_ln13_reg_294;
        icmp_ln13_reg_294_pp0_iter30_reg <= icmp_ln13_reg_294_pp0_iter29_reg;
        icmp_ln13_reg_294_pp0_iter31_reg <= icmp_ln13_reg_294_pp0_iter30_reg;
        icmp_ln13_reg_294_pp0_iter32_reg <= icmp_ln13_reg_294_pp0_iter31_reg;
        icmp_ln13_reg_294_pp0_iter33_reg <= icmp_ln13_reg_294_pp0_iter32_reg;
        icmp_ln13_reg_294_pp0_iter34_reg <= icmp_ln13_reg_294_pp0_iter33_reg;
        icmp_ln13_reg_294_pp0_iter35_reg <= icmp_ln13_reg_294_pp0_iter34_reg;
        icmp_ln13_reg_294_pp0_iter3_reg <= icmp_ln13_reg_294_pp0_iter2_reg;
        icmp_ln13_reg_294_pp0_iter4_reg <= icmp_ln13_reg_294_pp0_iter3_reg;
        icmp_ln13_reg_294_pp0_iter5_reg <= icmp_ln13_reg_294_pp0_iter4_reg;
        icmp_ln13_reg_294_pp0_iter6_reg <= icmp_ln13_reg_294_pp0_iter5_reg;
        icmp_ln13_reg_294_pp0_iter7_reg <= icmp_ln13_reg_294_pp0_iter6_reg;
        icmp_ln13_reg_294_pp0_iter8_reg <= icmp_ln13_reg_294_pp0_iter7_reg;
        icmp_ln13_reg_294_pp0_iter9_reg <= icmp_ln13_reg_294_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln10_reg_264 <= icmp_ln10_fu_136_p2;
        icmp_ln10_reg_264_pp0_iter1_reg <= icmp_ln10_reg_264;
        icmp_ln12_reg_284 <= icmp_ln12_fu_159_p2;
        icmp_ln13_reg_294 <= icmp_ln13_fu_171_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter35_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) 
    & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_294_pp0_iter35_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        ap_sig_allocacmp_add154_load = add_ln13_fu_205_p2;
    end else begin
        ap_sig_allocacmp_add154_load = add154_fu_64;
    end
end

always @ (*) begin
    if (((icmp_ln12_reg_284_pp0_iter35_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        ap_sig_allocacmp_add2_load = add_ln12_fu_186_p2;
    end else begin
        ap_sig_allocacmp_add2_load = add2_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_48;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_val1_ce0 = 1'b1;
    end else begin
        in_val1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_val2_ce0 = 1'b1;
    end else begin
        in_val2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_264_pp0_iter34_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_result1_ap_vld = 1'b1;
    end else begin
        out_result1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_264_pp0_iter34_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_result2_ap_vld = 1'b1;
    end else begin
        out_result2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_142_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign add_ln12_fu_186_p2 = (grp_fu_165_p2 + empty_fu_52);

assign add_ln13_fu_205_p2 = (grp_fu_177_p2 + empty_7_fu_56);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_518 = ((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_519 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln10_fu_136_p2 = ((ap_sig_allocacmp_i_1 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_159_p2 = ((in_val2_q0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_171_p2 = ((in_val1_q0 == 32'd0) ? 1'b1 : 1'b0);

assign in_val1_address0 = zext_ln10_fu_148_p1;

assign in_val2_address0 = zext_ln10_fu_148_p1;

assign out_result1 = ap_sig_allocacmp_add2_load;

assign out_result2 = ap_sig_allocacmp_add154_load;

assign zext_ln10_fu_148_p1 = ap_sig_allocacmp_i_1;

endmodule //divide_sum
