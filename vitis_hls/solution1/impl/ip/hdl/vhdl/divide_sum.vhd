-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity divide_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_val1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_val1_ce0 : OUT STD_LOGIC;
    in_val1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_val2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_val2_ce0 : OUT STD_LOGIC;
    in_val2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_result1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_result1_ap_vld : OUT STD_LOGIC;
    out_result2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_result2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of divide_sum is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "divide_sum_divide_sum,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.896000,HLS_SYN_LAT=47,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4966,HLS_SYN_LUT=3848,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln10_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_264_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_284_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_294_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln10_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_48 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln10_fu_142_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln12_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_7_fu_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln13_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_fu_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_add2_load : STD_LOGIC_VECTOR (31 downto 0);
    signal add154_fu_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_add154_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_518 : BOOLEAN;
    signal ap_condition_519 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component divide_sum_sdiv_32ns_32ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component divide_sum_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    sdiv_32ns_32ns_32_36_1_U1 : component divide_sum_sdiv_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_val1_q0,
        din1 => in_val2_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_165_p2);

    sdiv_32ns_32ns_32_36_1_U2 : component divide_sum_sdiv_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_val2_q0,
        din1 => in_val1_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    flow_control_loop_pipe_U : component divide_sum_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter35_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    add154_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_518)) then 
                    add154_fu_64 <= ap_const_lv32_0;
                elsif (((icmp_ln13_reg_294_pp0_iter35_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
                    add154_fu_64 <= add_ln13_fu_205_p2;
                end if;
            end if; 
        end if;
    end process;

    add2_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_518)) then 
                    add2_fu_60 <= ap_const_lv32_0;
                elsif (((icmp_ln12_reg_284_pp0_iter35_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
                    add2_fu_60 <= add_ln12_fu_186_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_7_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_518)) then 
                    empty_7_fu_56 <= ap_const_lv32_0;
                elsif (((icmp_ln13_reg_294_pp0_iter35_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
                    empty_7_fu_56 <= add_ln13_fu_205_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_518)) then 
                    empty_fu_52 <= ap_const_lv32_0;
                elsif (((icmp_ln12_reg_284_pp0_iter35_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
                    empty_fu_52 <= add_ln12_fu_186_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_519)) then
                if ((icmp_ln10_fu_136_p2 = ap_const_lv1_0)) then 
                    i_fu_48 <= add_ln10_fu_142_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_48 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln10_reg_264_pp0_iter10_reg <= icmp_ln10_reg_264_pp0_iter9_reg;
                icmp_ln10_reg_264_pp0_iter11_reg <= icmp_ln10_reg_264_pp0_iter10_reg;
                icmp_ln10_reg_264_pp0_iter12_reg <= icmp_ln10_reg_264_pp0_iter11_reg;
                icmp_ln10_reg_264_pp0_iter13_reg <= icmp_ln10_reg_264_pp0_iter12_reg;
                icmp_ln10_reg_264_pp0_iter14_reg <= icmp_ln10_reg_264_pp0_iter13_reg;
                icmp_ln10_reg_264_pp0_iter15_reg <= icmp_ln10_reg_264_pp0_iter14_reg;
                icmp_ln10_reg_264_pp0_iter16_reg <= icmp_ln10_reg_264_pp0_iter15_reg;
                icmp_ln10_reg_264_pp0_iter17_reg <= icmp_ln10_reg_264_pp0_iter16_reg;
                icmp_ln10_reg_264_pp0_iter18_reg <= icmp_ln10_reg_264_pp0_iter17_reg;
                icmp_ln10_reg_264_pp0_iter19_reg <= icmp_ln10_reg_264_pp0_iter18_reg;
                icmp_ln10_reg_264_pp0_iter20_reg <= icmp_ln10_reg_264_pp0_iter19_reg;
                icmp_ln10_reg_264_pp0_iter21_reg <= icmp_ln10_reg_264_pp0_iter20_reg;
                icmp_ln10_reg_264_pp0_iter22_reg <= icmp_ln10_reg_264_pp0_iter21_reg;
                icmp_ln10_reg_264_pp0_iter23_reg <= icmp_ln10_reg_264_pp0_iter22_reg;
                icmp_ln10_reg_264_pp0_iter24_reg <= icmp_ln10_reg_264_pp0_iter23_reg;
                icmp_ln10_reg_264_pp0_iter25_reg <= icmp_ln10_reg_264_pp0_iter24_reg;
                icmp_ln10_reg_264_pp0_iter26_reg <= icmp_ln10_reg_264_pp0_iter25_reg;
                icmp_ln10_reg_264_pp0_iter27_reg <= icmp_ln10_reg_264_pp0_iter26_reg;
                icmp_ln10_reg_264_pp0_iter28_reg <= icmp_ln10_reg_264_pp0_iter27_reg;
                icmp_ln10_reg_264_pp0_iter29_reg <= icmp_ln10_reg_264_pp0_iter28_reg;
                icmp_ln10_reg_264_pp0_iter2_reg <= icmp_ln10_reg_264_pp0_iter1_reg;
                icmp_ln10_reg_264_pp0_iter30_reg <= icmp_ln10_reg_264_pp0_iter29_reg;
                icmp_ln10_reg_264_pp0_iter31_reg <= icmp_ln10_reg_264_pp0_iter30_reg;
                icmp_ln10_reg_264_pp0_iter32_reg <= icmp_ln10_reg_264_pp0_iter31_reg;
                icmp_ln10_reg_264_pp0_iter33_reg <= icmp_ln10_reg_264_pp0_iter32_reg;
                icmp_ln10_reg_264_pp0_iter34_reg <= icmp_ln10_reg_264_pp0_iter33_reg;
                icmp_ln10_reg_264_pp0_iter3_reg <= icmp_ln10_reg_264_pp0_iter2_reg;
                icmp_ln10_reg_264_pp0_iter4_reg <= icmp_ln10_reg_264_pp0_iter3_reg;
                icmp_ln10_reg_264_pp0_iter5_reg <= icmp_ln10_reg_264_pp0_iter4_reg;
                icmp_ln10_reg_264_pp0_iter6_reg <= icmp_ln10_reg_264_pp0_iter5_reg;
                icmp_ln10_reg_264_pp0_iter7_reg <= icmp_ln10_reg_264_pp0_iter6_reg;
                icmp_ln10_reg_264_pp0_iter8_reg <= icmp_ln10_reg_264_pp0_iter7_reg;
                icmp_ln10_reg_264_pp0_iter9_reg <= icmp_ln10_reg_264_pp0_iter8_reg;
                icmp_ln12_reg_284_pp0_iter10_reg <= icmp_ln12_reg_284_pp0_iter9_reg;
                icmp_ln12_reg_284_pp0_iter11_reg <= icmp_ln12_reg_284_pp0_iter10_reg;
                icmp_ln12_reg_284_pp0_iter12_reg <= icmp_ln12_reg_284_pp0_iter11_reg;
                icmp_ln12_reg_284_pp0_iter13_reg <= icmp_ln12_reg_284_pp0_iter12_reg;
                icmp_ln12_reg_284_pp0_iter14_reg <= icmp_ln12_reg_284_pp0_iter13_reg;
                icmp_ln12_reg_284_pp0_iter15_reg <= icmp_ln12_reg_284_pp0_iter14_reg;
                icmp_ln12_reg_284_pp0_iter16_reg <= icmp_ln12_reg_284_pp0_iter15_reg;
                icmp_ln12_reg_284_pp0_iter17_reg <= icmp_ln12_reg_284_pp0_iter16_reg;
                icmp_ln12_reg_284_pp0_iter18_reg <= icmp_ln12_reg_284_pp0_iter17_reg;
                icmp_ln12_reg_284_pp0_iter19_reg <= icmp_ln12_reg_284_pp0_iter18_reg;
                icmp_ln12_reg_284_pp0_iter20_reg <= icmp_ln12_reg_284_pp0_iter19_reg;
                icmp_ln12_reg_284_pp0_iter21_reg <= icmp_ln12_reg_284_pp0_iter20_reg;
                icmp_ln12_reg_284_pp0_iter22_reg <= icmp_ln12_reg_284_pp0_iter21_reg;
                icmp_ln12_reg_284_pp0_iter23_reg <= icmp_ln12_reg_284_pp0_iter22_reg;
                icmp_ln12_reg_284_pp0_iter24_reg <= icmp_ln12_reg_284_pp0_iter23_reg;
                icmp_ln12_reg_284_pp0_iter25_reg <= icmp_ln12_reg_284_pp0_iter24_reg;
                icmp_ln12_reg_284_pp0_iter26_reg <= icmp_ln12_reg_284_pp0_iter25_reg;
                icmp_ln12_reg_284_pp0_iter27_reg <= icmp_ln12_reg_284_pp0_iter26_reg;
                icmp_ln12_reg_284_pp0_iter28_reg <= icmp_ln12_reg_284_pp0_iter27_reg;
                icmp_ln12_reg_284_pp0_iter29_reg <= icmp_ln12_reg_284_pp0_iter28_reg;
                icmp_ln12_reg_284_pp0_iter2_reg <= icmp_ln12_reg_284;
                icmp_ln12_reg_284_pp0_iter30_reg <= icmp_ln12_reg_284_pp0_iter29_reg;
                icmp_ln12_reg_284_pp0_iter31_reg <= icmp_ln12_reg_284_pp0_iter30_reg;
                icmp_ln12_reg_284_pp0_iter32_reg <= icmp_ln12_reg_284_pp0_iter31_reg;
                icmp_ln12_reg_284_pp0_iter33_reg <= icmp_ln12_reg_284_pp0_iter32_reg;
                icmp_ln12_reg_284_pp0_iter34_reg <= icmp_ln12_reg_284_pp0_iter33_reg;
                icmp_ln12_reg_284_pp0_iter35_reg <= icmp_ln12_reg_284_pp0_iter34_reg;
                icmp_ln12_reg_284_pp0_iter3_reg <= icmp_ln12_reg_284_pp0_iter2_reg;
                icmp_ln12_reg_284_pp0_iter4_reg <= icmp_ln12_reg_284_pp0_iter3_reg;
                icmp_ln12_reg_284_pp0_iter5_reg <= icmp_ln12_reg_284_pp0_iter4_reg;
                icmp_ln12_reg_284_pp0_iter6_reg <= icmp_ln12_reg_284_pp0_iter5_reg;
                icmp_ln12_reg_284_pp0_iter7_reg <= icmp_ln12_reg_284_pp0_iter6_reg;
                icmp_ln12_reg_284_pp0_iter8_reg <= icmp_ln12_reg_284_pp0_iter7_reg;
                icmp_ln12_reg_284_pp0_iter9_reg <= icmp_ln12_reg_284_pp0_iter8_reg;
                icmp_ln13_reg_294_pp0_iter10_reg <= icmp_ln13_reg_294_pp0_iter9_reg;
                icmp_ln13_reg_294_pp0_iter11_reg <= icmp_ln13_reg_294_pp0_iter10_reg;
                icmp_ln13_reg_294_pp0_iter12_reg <= icmp_ln13_reg_294_pp0_iter11_reg;
                icmp_ln13_reg_294_pp0_iter13_reg <= icmp_ln13_reg_294_pp0_iter12_reg;
                icmp_ln13_reg_294_pp0_iter14_reg <= icmp_ln13_reg_294_pp0_iter13_reg;
                icmp_ln13_reg_294_pp0_iter15_reg <= icmp_ln13_reg_294_pp0_iter14_reg;
                icmp_ln13_reg_294_pp0_iter16_reg <= icmp_ln13_reg_294_pp0_iter15_reg;
                icmp_ln13_reg_294_pp0_iter17_reg <= icmp_ln13_reg_294_pp0_iter16_reg;
                icmp_ln13_reg_294_pp0_iter18_reg <= icmp_ln13_reg_294_pp0_iter17_reg;
                icmp_ln13_reg_294_pp0_iter19_reg <= icmp_ln13_reg_294_pp0_iter18_reg;
                icmp_ln13_reg_294_pp0_iter20_reg <= icmp_ln13_reg_294_pp0_iter19_reg;
                icmp_ln13_reg_294_pp0_iter21_reg <= icmp_ln13_reg_294_pp0_iter20_reg;
                icmp_ln13_reg_294_pp0_iter22_reg <= icmp_ln13_reg_294_pp0_iter21_reg;
                icmp_ln13_reg_294_pp0_iter23_reg <= icmp_ln13_reg_294_pp0_iter22_reg;
                icmp_ln13_reg_294_pp0_iter24_reg <= icmp_ln13_reg_294_pp0_iter23_reg;
                icmp_ln13_reg_294_pp0_iter25_reg <= icmp_ln13_reg_294_pp0_iter24_reg;
                icmp_ln13_reg_294_pp0_iter26_reg <= icmp_ln13_reg_294_pp0_iter25_reg;
                icmp_ln13_reg_294_pp0_iter27_reg <= icmp_ln13_reg_294_pp0_iter26_reg;
                icmp_ln13_reg_294_pp0_iter28_reg <= icmp_ln13_reg_294_pp0_iter27_reg;
                icmp_ln13_reg_294_pp0_iter29_reg <= icmp_ln13_reg_294_pp0_iter28_reg;
                icmp_ln13_reg_294_pp0_iter2_reg <= icmp_ln13_reg_294;
                icmp_ln13_reg_294_pp0_iter30_reg <= icmp_ln13_reg_294_pp0_iter29_reg;
                icmp_ln13_reg_294_pp0_iter31_reg <= icmp_ln13_reg_294_pp0_iter30_reg;
                icmp_ln13_reg_294_pp0_iter32_reg <= icmp_ln13_reg_294_pp0_iter31_reg;
                icmp_ln13_reg_294_pp0_iter33_reg <= icmp_ln13_reg_294_pp0_iter32_reg;
                icmp_ln13_reg_294_pp0_iter34_reg <= icmp_ln13_reg_294_pp0_iter33_reg;
                icmp_ln13_reg_294_pp0_iter35_reg <= icmp_ln13_reg_294_pp0_iter34_reg;
                icmp_ln13_reg_294_pp0_iter3_reg <= icmp_ln13_reg_294_pp0_iter2_reg;
                icmp_ln13_reg_294_pp0_iter4_reg <= icmp_ln13_reg_294_pp0_iter3_reg;
                icmp_ln13_reg_294_pp0_iter5_reg <= icmp_ln13_reg_294_pp0_iter4_reg;
                icmp_ln13_reg_294_pp0_iter6_reg <= icmp_ln13_reg_294_pp0_iter5_reg;
                icmp_ln13_reg_294_pp0_iter7_reg <= icmp_ln13_reg_294_pp0_iter6_reg;
                icmp_ln13_reg_294_pp0_iter8_reg <= icmp_ln13_reg_294_pp0_iter7_reg;
                icmp_ln13_reg_294_pp0_iter9_reg <= icmp_ln13_reg_294_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln10_reg_264 <= icmp_ln10_fu_136_p2;
                icmp_ln10_reg_264_pp0_iter1_reg <= icmp_ln10_reg_264;
                icmp_ln12_reg_284 <= icmp_ln12_fu_159_p2;
                icmp_ln13_reg_294 <= icmp_ln13_fu_171_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    add_ln12_fu_186_p2 <= std_logic_vector(unsigned(grp_fu_165_p2) + unsigned(empty_fu_52));
    add_ln13_fu_205_p2 <= std_logic_vector(unsigned(grp_fu_177_p2) + unsigned(empty_7_fu_56));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_518_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init)
    begin
                ap_condition_518 <= ((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_519_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_519 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln10_fu_136_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter35_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter35_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_add154_load_assign_proc : process(ap_enable_reg_pp0_iter36, icmp_ln13_reg_294_pp0_iter35_reg, ap_block_pp0_stage0, add_ln13_fu_205_p2, add154_fu_64)
    begin
        if (((icmp_ln13_reg_294_pp0_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            ap_sig_allocacmp_add154_load <= add_ln13_fu_205_p2;
        else 
            ap_sig_allocacmp_add154_load <= add154_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_add2_load_assign_proc : process(ap_enable_reg_pp0_iter36, icmp_ln12_reg_284_pp0_iter35_reg, ap_block_pp0_stage0, add_ln12_fu_186_p2, add2_fu_60)
    begin
        if (((icmp_ln12_reg_284_pp0_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            ap_sig_allocacmp_add2_load <= add_ln12_fu_186_p2;
        else 
            ap_sig_allocacmp_add2_load <= add2_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, i_fu_48, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_48;
        end if; 
    end process;

    icmp_ln10_fu_136_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_A) else "0";
    icmp_ln12_fu_159_p2 <= "1" when (in_val2_q0 = ap_const_lv32_0) else "0";
    icmp_ln13_fu_171_p2 <= "1" when (in_val1_q0 = ap_const_lv32_0) else "0";
    in_val1_address0 <= zext_ln10_fu_148_p1(4 - 1 downto 0);

    in_val1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_val1_ce0 <= ap_const_logic_1;
        else 
            in_val1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_val2_address0 <= zext_ln10_fu_148_p1(4 - 1 downto 0);

    in_val2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_val2_ce0 <= ap_const_logic_1;
        else 
            in_val2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_result1 <= ap_sig_allocacmp_add2_load;

    out_result1_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_264_pp0_iter34_reg)
    begin
        if (((icmp_ln10_reg_264_pp0_iter34_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_result1_ap_vld <= ap_const_logic_1;
        else 
            out_result1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_result2 <= ap_sig_allocacmp_add154_load;

    out_result2_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_264_pp0_iter34_reg)
    begin
        if (((icmp_ln10_reg_264_pp0_iter34_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_result2_ap_vld <= ap_const_logic_1;
        else 
            out_result2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln10_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
